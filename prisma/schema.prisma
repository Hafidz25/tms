// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id                   String    @id @default(cuid())
  name                 String    @db.VarChar(255)
  email                String    @unique @db.VarChar(255)
  role                 String    @default("Team Member")
  password             String    @db.VarChar(255)
  briefs               Brief[]   @relation("assign") // user have many brief
  briefsCreated        Brief[]   @relation("author") // user have many brief
  feedbacks            Feedback[]  @relation("user") // user have many feedback
  feedbackPrivate      Feedback[]  @relation("userSent") // user have many feedback
  briefNotification    BriefNotification[]
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
}

model Brief {
  id              String    @id @default(cuid())
  title           String
  deadline        Json   // {to: DateTime, from: DateTime} - Butuh konfigurasi typed json
  content         String
  status          String
  author          User?     @relation("author", fields: [authorId], references: [id], onDelete: Cascade) // A feedback can have one brief
  authorId        String?
  assign          User[]    @relation("assign")
  feedback        Feedback[]   // brief have many feedback
  notification    BriefNotification[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Feedback {
  id              String    @id @default(cuid())
  content         String
  status          String    @default("Default")
  isReply         Boolean   @default(false)
  replyId         String    @default("")
  isEdited        Boolean   @default(false)
  user            User?     @relation("user", fields: [userId], references: [id]) // A feedback can have one brief
  userId          String?
  userSent        User?     @relation("userSent", fields: [userSentId], references: [id]) // A feedback can have one brief
  userSentId      String?
  brief           Brief?    @relation(fields: [briefId], references: [id], onDelete: Cascade) // A feedback can have one brief
  briefId         String?
  createdAt       DateTime  @default(now())
}

model BriefNotification {
  id              String    @id @default(cuid())
  message         String
  read            Boolean @default(false)
  assign          User[]
  brief           Brief?    @relation(fields: [briefId], references: [id], onDelete: Cascade)
  briefId         String?
  createdAt       DateTime  @default(now())
}


// model FeedbackNotification {
//   id              String    @id @default(cuid())
//   message         String
//   read            Boolean @default(false)
//   user            User?     @relation(fields: [userId], references: [id])
//   userId          String?
//   feedback        Feedback?    @relation(fields: [feedbackId], references: [id])
//   feedbackId      String?
//   createdAt       DateTime  @default(now())
// }